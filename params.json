{"name":"Stream","tagline":"Stream is a module that defines an interface for external iterators.","body":"= Extended External Iterators (forward and backward) {<img src=\"https://secure.travis-ci.org/monora/stream.png?branch=master\" alt=\"Build Status\" />}[https://travis-ci.org/monora/stream]\r\n\r\n== Description\r\n\r\nModule Stream defines an interface for external iterators. A stream can be\r\nseen as an iterator on a sequence of objects x1,...,xn. The state of the\r\nstream is uniquely determined by the following methods:\r\n\r\n* at_beginning?\r\n* at_end?\r\n* current\r\n* peek\r\n\r\nState changes are done with the following operations:\r\n\r\n* set_to_begin\r\n* set_to_end\r\n* forward\r\n* backward\r\n\r\nWith the help of the method current_edge the state of a stream s can be\r\nexactly defined\r\n\r\n s.current_edge == [s.current, s.peek]\r\n\r\nIf s a stream on [x1,...,xn]. Consider the edges [xi,xi+1] i=1,...,n and\r\n[x0,x1] and [xn,xn+1] (x0 and xn+1 are helper elements to define the boundary\r\nconditions). Then if s is non empty, the following conditions must be true:\r\n\r\n s.at_beginning? <=> s.current_edge == [x0,x1]\r\n s.at_end? <=> s.current_edge == [xn,xn+1]\r\n s.isEmpty? <=> s.at_beginning? && s.at_end? <=> s.current_edge == [x0,x1] <=> n = 0\r\n s.set_to_end => s.at_end?\r\n s.set_to_begin => s.at_beginning?\r\n\r\nIf 0 <= i < n and s.current_edge == [xi, xi+1] , then:\r\n\r\n [s.forward, s.current_edge] == [xi+1, [xi+1, xi+2]]\r\n\r\nIf 1 <= i < n and s.current_edge == [xi, xi+1] , then:\r\n\r\n [s.backward, s.current_edge] == [xi, [xi-1, xi]]\r\n\r\nThe result of peek is the same as of forward without changing state. The result of\r\ncurrent is the same as of backward without changing state.\r\n\r\nModule Stream includes Enumerable implementing #each in the obvious way.\r\n\r\nNot every stream needs to implement #backward and #at_beginning? thus being\r\nnot reversable. If they are reversable peek can easily be implemented using\r\nforward and backward, as is done in module Stream. If a stream is not\r\nreversable all derived streams provided by the stream module (filter,\r\nmapping, concatenation) can be used anyway. Explicit or implicit (via peek or\r\ncurrent) uses of backward would throw a NotImplementedError.\r\n\r\nClasses implementing the stream interface must implement the following methods:\r\n\r\n* basic_forward\r\n* basic_backward\r\n\r\n* at_end?\r\n* at_beginning?\r\n\r\nThe methods set_to_end and set_to_begin are by default implemented as:\r\n\r\n set_to_end   :  until at_end?; do basic_forward end\r\n set_to_begin :  until at_beginning?; do basic_backward end\r\n\r\nThe methods forward and backward are by default implemented as:\r\n\r\n forward:\t   raise EndOfStreamException if at_end?; basic_forward.\r\n backward:   raise EndOfStreamException if at_beginning?; basic_backward\r\n\r\nThus subclasses must only implement *four* methods. Efficiency sometimes\r\ndemands better implementations.\r\n\r\nThere are several concrete classes implementing the stream interface:\r\n\r\n* Stream::EmptyStream (boring)\r\n* Stream::CollectionStream created by the method Array#create_stream\r\n* Stream::FilteredStream created by the method Stream#filtered\r\n* Stream::ReversedStream created by the method Stream#reverse\r\n* Stream::ConcatenatedStream created by the method Stream#concatenate\r\n* Stream::ImplicitStream using closures for the basic methods to implement\r\n\r\n== Download\r\n\r\nThe latest version of stream.rb can be found at\r\n\r\n* http://github.com/monora/stream\r\n\r\n== Installation\r\n\r\n=== Normal Installation\r\n\r\nYou can install stream with the following command.\r\n\r\n  % ruby install.rb\r\n\r\nfrom its distribution directory.\r\n\r\n=== GEM Installation\r\n\r\nDownload the GEM file and install it with ..\r\n\r\n   gem -i stream-VERSION.gem\r\n\r\nUse the correct version number for VERSION (e.g. 0.5).  You may need\r\nroot privileges to install.\r\n\r\n== See also\r\n\r\n* Streams in Smalltalk: http://wiki.cs.uiuc.edu/PatternStories/FunWithStreams\r\n* Simon Strandgaards iterator.rb[http://aeditor.rubyforge.org/iterator/files/iterator_rb.html]\r\n\r\n== Examples\r\n\r\n  g = ('a'..'f').create_stream\r\n  h = (1..10).create_stream\r\n  i = (10..20).create_stream\r\n\r\n  until g.at_end? || h.at_end? || i.at_end?\r\n    p [g.forward, h.forward, i.forward]\r\n  end\r\n\r\n  def filestream fname\r\n    Stream::ImplicitStream.new { |s|\r\n      f = open(fname)\r\n      s.at_end_proc = proc {f.eof?}\r\n      s.forward_proc = proc {f.readline}\r\n      # Need not implement backward moving to use the framework\r\n    }\r\n  end\r\n\r\n  (filestream(\"/etc/passwd\") + ('a'..'f').create_stream + filestream(\"/etc/group\")).each do |l|\r\n    puts l\r\n  end\r\n\r\n  puts \"\\nTwo filtered collection streams concatenated and reversed:\\n\\n\"\r\n\r\n  def newstream; (1..6).create_stream; end\r\n  s = newstream.filtered { |x| x % 2 == 0 } + newstream.filtered { |x| x % 2 != 0 }\r\n  s = s.reverse\r\n  puts \"Contents      : #{s.to_a.join ' '}\"\r\n  puts \"At end?       : #{s.at_end?}\"\r\n  puts \"At beginning? : #{s.at_beginning?}\"\r\n  puts \"2xBackwards   : #{s.backward} #{s.backward}\"\r\n  puts \"Forward       : #{s.forward}\"\r\n  puts \"Peek          : #{s.peek}\"\r\n  puts \"Current       : #{s.current}\"\r\n  puts \"set_to_begin    : Peek=#{s.set_to_begin;s.peek}\"\r\n\r\n  # an infinite stream (do not use set_to_end!)\r\n  def randomStream\r\n    Stream::ImplicitStream.new { |s|\r\n      s.set_to_begin_proc = proc {srand 1234}\r\n      s.at_end_proc = proc {false}\r\n      s.forward_proc = proc {rand}\r\n    }\r\n  end\r\n  s = randomStream.filtered { |x| x >= 0.5 }.collect { |x| sprintf(\"%5.2f \",x*100) }\r\n  puts \"5 random numbers: #{(1..5).collect {|x| s.forward}}\\n\" # =>\r\n\r\n    5 random numbers: 74.05 94.80 87.87 86.07 83.70\r\n\r\n== Other Stuff\r\n\r\nAuthor:: Horst Duchene <mailto:monora@rubyforge.org>\r\nLicense:: Copyright (c) 2001, 2013 Horst Duchene\r\nReleased under the same license as Ruby\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}